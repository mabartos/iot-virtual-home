[
    {
        "id": "72cebb9d0897dcf1",
        "type": "tab",
        "label": "Central Heating",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "4dad1370f004240b",
        "type": "mqtt in",
        "z": "72cebb9d0897dcf1",
        "name": "Central Heating topic",
        "topic": "MUSI-IoT-2022/AlinaMartin/centralHeating",
        "qos": "2",
        "datatype": "utf8",
        "broker": "838e41213a61d9fb",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 360,
        "y": 280,
        "wires": [
            [
                "184162539100a31d"
            ]
        ]
    },
    {
        "id": "e63c3c6ca2e693ad",
        "type": "mqtt out",
        "z": "72cebb9d0897dcf1",
        "name": "Current power consumption",
        "topic": "MUSI-IoT-2022/AlinaMartin/centralHeating/energy",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "838e41213a61d9fb",
        "x": 1460,
        "y": 480,
        "wires": []
    },
    {
        "id": "f0a7bbe6c4d8ec67",
        "type": "inject",
        "z": "72cebb9d0897dcf1",
        "name": "Initiator",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": true,
        "onceDelay": "0.5",
        "topic": "",
        "payload": "none",
        "payloadType": "str",
        "x": 120,
        "y": 480,
        "wires": [
            [
                "9303d4aa5125f567"
            ]
        ]
    },
    {
        "id": "6f32a49143ef4324",
        "type": "function",
        "z": "72cebb9d0897dcf1",
        "name": "Store State",
        "func": "flow.set(\"central_heating_state\", msg.payload)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 280,
        "wires": [
            [
                "dce8207f9eb8ce97"
            ]
        ]
    },
    {
        "id": "dce8207f9eb8ce97",
        "type": "debug",
        "z": "72cebb9d0897dcf1",
        "name": "Store State",
        "active": false,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1080,
        "y": 280,
        "wires": []
    },
    {
        "id": "245f6cec4e848b2f",
        "type": "function",
        "z": "72cebb9d0897dcf1",
        "name": "Current power",
        "func": "const state = msg.state\n\nif(state && state === \"ON\"){\n    msg.payload = 2000\n} else{\n    msg.payload = 0\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 480,
        "wires": [
            [
                "2380e9ccce5a7737"
            ]
        ]
    },
    {
        "id": "d35609aa74faefdb",
        "type": "debug",
        "z": "72cebb9d0897dcf1",
        "name": "Power consumption",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1430,
        "y": 400,
        "wires": []
    },
    {
        "id": "184162539100a31d",
        "type": "function",
        "z": "72cebb9d0897dcf1",
        "name": "Add timestamp",
        "func": "msg.payload = {\n    value : msg.payload,\n    time : (new Date()).toISOString()\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 280,
        "wires": [
            [
                "6f32a49143ef4324",
                "8ae7ffbe9ee29fa3"
            ]
        ]
    },
    {
        "id": "2380e9ccce5a7737",
        "type": "function",
        "z": "72cebb9d0897dcf1",
        "name": "Add timestamp",
        "func": "msg.payload = {\n    value : msg.payload,\n    time : (new Date()).toISOString()\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1220,
        "y": 480,
        "wires": [
            [
                "e63c3c6ca2e693ad",
                "d35609aa74faefdb"
            ]
        ]
    },
    {
        "id": "8ae7ffbe9ee29fa3",
        "type": "change",
        "z": "72cebb9d0897dcf1",
        "name": "Format for InfluxDB",
        "rules": [
            {
                "t": "set",
                "p": "fields.state",
                "pt": "msg",
                "to": "payload.value",
                "tot": "msg",
                "dc": true
            },
            {
                "t": "set",
                "p": "tags.timestamp",
                "pt": "msg",
                "to": "payload.time",
                "tot": "msg",
                "dc": true
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "$append(fields,tags)",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 870,
        "y": 180,
        "wires": [
            [
                "ba779bc8e2efe19c",
                "040f255b82a445db"
            ]
        ]
    },
    {
        "id": "ba779bc8e2efe19c",
        "type": "influxdb out",
        "z": "72cebb9d0897dcf1",
        "influxdb": "deacb2722d06694f",
        "name": "heating-state",
        "measurement": "heating-state",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "alinaMartin",
        "bucket": "home1",
        "x": 1150,
        "y": 180,
        "wires": []
    },
    {
        "id": "040f255b82a445db",
        "type": "debug",
        "z": "72cebb9d0897dcf1",
        "name": "Save state to InfluxDB",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1160,
        "y": 100,
        "wires": []
    },
    {
        "id": "538a4d9fc81716fb",
        "type": "influxdb in",
        "z": "72cebb9d0897dcf1",
        "influxdb": "deacb2722d06694f",
        "name": "Get State Influx",
        "query": "from(bucket: \"home1\")\n  |> range(start: 0)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"heating-state\")\n  |> filter(fn: (r) => r[\"_field\"] == \"state\")\n  |> group(columns: [\"*\"])\n  |> sort(columns: [\"timestamp\"], desc: true)\n  |> limit(n: 1)",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "alinaMartin",
        "x": 580,
        "y": 600,
        "wires": [
            [
                "431de270d3477e8b"
            ]
        ]
    },
    {
        "id": "fbf9ffe61a8f5cfa",
        "type": "switch",
        "z": "72cebb9d0897dcf1",
        "name": "Get State",
        "property": "state",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            },
            {
                "t": "null"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 480,
        "y": 480,
        "wires": [
            [
                "245f6cec4e848b2f"
            ],
            [
                "538a4d9fc81716fb"
            ]
        ]
    },
    {
        "id": "9303d4aa5125f567",
        "type": "function",
        "z": "72cebb9d0897dcf1",
        "name": "Get Flow State",
        "func": "const state = flow.get(\"central_heating_state\")\n\nif(state !== undefined && state !== null){\n    msg.state=state.value;\n} else {\n    msg.state=null;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 480,
        "wires": [
            [
                "fbf9ffe61a8f5cfa"
            ]
        ]
    },
    {
        "id": "431de270d3477e8b",
        "type": "function",
        "z": "72cebb9d0897dcf1",
        "name": "Convert from InfluxDB",
        "func": "const item=msg.payload[0];\n\nif(!!item){\n    msg.state=item[\"_value\"];\n    msg.payload={}\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 600,
        "wires": [
            [
                "245f6cec4e848b2f"
            ]
        ]
    },
    {
        "id": "838e41213a61d9fb",
        "type": "mqtt-broker",
        "name": "localhost",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "deacb2722d06694f",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "database",
        "name": "localhost",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "http://localhost:8086",
        "rejectUnauthorized": false
    }
]